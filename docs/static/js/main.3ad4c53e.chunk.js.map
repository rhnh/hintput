{"version":3,"sources":["Hintput.tsx","utils.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Hintput","items","handleBlur","handleChange","placeholder","numberOfSuggestions","name","className","style","useState","hint","setHint","text","setText","suggestions","setSuggestions","tabbed","setTabbed","hide","setHide","found","setFound","originalText","setOriginalText","useEffect","length","hintArray","Array","from","Set","filter","item","Object","values","join","trim","toLowerCase","includes","sort","a","b","localeCompare","findAndSort","hintIndex","indexOf","restHint","substr","firstMatch","split","slice","hintBegging","innerStyle","background","border","outline","inputRef","React","useRef","inputRefHidden","width","position","padding","margin","display","ref","type","id","value","onChange","e","target","onBlur","onKeyDown","key","test","re","code","shiftKey","tabIndex","color","borderWidth","pointerEvents","backgroundColor","borderColor","boxSizing","top","left","justifyContent","alignItems","outlineStyle","caretColor","disabled","map","suggestion","i","onClick","current","focus","names","App","setName","n","htmlFor","toUpperCase","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ad4c53e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { IHintput } from './types'\nimport './index.css'\nimport { findAndSort } from './utils'\n/**\n *\n * @param  - items: array of strings\n * @param - handleBlur: takes an event object and fire action onBlur\n * @param - handleChange: takes an event object and fire action onChange\n * @param - name for the name and id of input box and label\n * @returns - Returns a react component\n */\n\n//removes duplicate and find and sort\n\nexport function Hintput({\n  items,\n  handleBlur,\n  handleChange,\n  placeholder,\n  numberOfSuggestions = 5,\n  name,\n  className = '',\n  style,\n}: IHintput): React.ReactElement {\n  const [hint, setHint] = useState('')\n  const [text, setText] = useState('')\n  const [suggestions, setSuggestions] = useState<string[]>([])\n  const [tabbed, setTabbed] = useState(false)\n  const [hide, setHide] = useState(false)\n  const [found, setFound] = useState(true)\n  const [originalText, setOriginalText] = useState('')\n  useEffect(() => {\n    if (text === '') {\n      return\n    }\n\n    if (text.length > 2 && found) {\n      const hintArray = findAndSort(items, text)\n      //hint = 0 => don't show suggestions\n      if (hintArray.length <= 0) {\n        setHint('')\n        setSuggestions([])\n      }\n      //hint = 1 => don't show suggestions\n      if (hintArray.length === 1) {\n        const hintIndex = hintArray[0]\n          ?.toLowerCase()\n          .indexOf(text.toLowerCase())\n        if (hintIndex === 0) {\n          setHint(hintArray[0].toLowerCase())\n        } else if (hintIndex > 0) {\n          const restHint = hintArray[0]?.substr(0, hintIndex)\n          if (restHint) {\n            setText(restHint + text)\n          }\n        }\n        setSuggestions([])\n      }\n      /**\n       * hint > 1,\n       * if(hint matched at beginning) just show the hint and remove it from suggestions\n       * if(hint matched at last) don't show hint, and don't remove it from suggestions\n       * if(hint matched in the middle) do show the hint, and remove it from suggestions\n       */\n      if (hintArray.length > 1) {\n        const firstMatch = hintArray[0]\n        const hintIndex = firstMatch?.toLowerCase().indexOf(text.toLowerCase())\n        if (hintIndex === 0) {\n          setHint(firstMatch.toLowerCase())\n        } else if (hintIndex > 0) {\n          const isLastWord = firstMatch.split(' ').slice(-1).join('') //get the last word\n          if (isLastWord) {\n            return setSuggestions(hintArray.slice(0, numberOfSuggestions))\n          }\n          const hintBegging = firstMatch.substr(0, hintIndex)\n          const completedWord = hintBegging + text\n          setHint(completedWord)\n        }\n        setSuggestions(hintArray.slice(1, numberOfSuggestions))\n      }\n    }\n  }, [found, hint, items, numberOfSuggestions, text])\n\n  const handleBlurInside = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target\n    setText(value)\n    setHint('')\n    setHide(false)\n    setOriginalText('')\n    if (typeof handleBlur === 'function') handleBlur(e)\n  }\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key.length === 1) {\n      const alphaNum = /[a-z]|[0|9]|\\s/\n      if (alphaNum.test(e.key)) setOriginalText((re) => re + e.key)\n    }\n\n    if (e.code === 'Backspace') {\n      setHint('')\n      setHint('')\n      setText(originalText)\n      setOriginalText('')\n      setSuggestions([])\n      setHide(false)\n      setFound(false)\n    }\n    if (e.code === 'Tab') {\n      if (suggestions.length <= 0) {\n        if (hint) setText(hint)\n        setHint('')\n      }\n    }\n    if (e.code === 'Enter') {\n      if (hint) setText(hint)\n      setHint('')\n      setSuggestions([])\n      setTabbed(false)\n    }\n    if (e.shiftKey && e.code === 'Tab') {\n      setHint('')\n      setSuggestions([])\n      setTabbed(false)\n    }\n  }\n  const innerStyle = {\n    background: 'transparent',\n    border: 'none',\n    ':selected, :focused': {\n      border: 'none',\n      outline: '1px solid blue',\n    },\n  }\n  const handleChangeInside = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target as HTMLInputElement\n    if (text.length === 0) {\n      setFound(true)\n    }\n    setHide(true)\n    setText(value.toLowerCase())\n    setTabbed(true)\n    if (typeof handleChange === 'function') handleChange(e)\n  }\n  const inputRef = React.useRef<HTMLInputElement>(null)\n  const inputRefHidden = React.useRef<HTMLInputElement>(null)\n  const { width } = style || {}\n\n  return (\n    <span\n      style={{\n        position: 'relative',\n        padding: 0,\n        margin: 0,\n        display: 'inline-block',\n        width,\n      }}\n    >\n      <input\n        ref={inputRef}\n        className={`${className} hint`}\n        type=\"text\"\n        name={name}\n        id={name}\n        placeholder={placeholder}\n        value={text.toLowerCase()}\n        onChange={handleChangeInside}\n        onBlur={handleBlurInside}\n        onKeyDown={handleKeyDown}\n        tabIndex={suggestions.length > 0 ? 1 : 0}\n        style={{\n          border: '1px solid black',\n          ...style,\n          width: '100%',\n          color: '#000000',\n          borderWidth: '1px',\n        }}\n      />\n      {hide && (\n          <span\n            className={`${className} `}\n            ref={inputRefHidden}\n            style={{\n              ...style,\n              display: 'flex',\n              pointerEvents: 'none',\n              backgroundColor: 'transparent',\n              borderColor: 'transparent',\n              boxSizing: 'border-box',\n              color: 'rgba(0, 0, 0, 0.35)',\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              justifyContent: 'flex-end',\n              alignItems: 'stretch',\n              border: 'none',\n              width: '100%',\n              outlineStyle: 'none',\n              margin: 'none',\n              padding: 0,\n            }}\n          >\n            <input\n              value={hint}\n              className={`${className} hint`}\n              id=\"#hint\"\n              style={{\n                ...style,\n                color: 'black',\n                caretColor: 'transparent',\n                backgroundColor: 'transparent',\n                outline: 'none',\n                width: '100%',\n                border: 'none',\n                outlineStyle: 'none',\n              }}\n              disabled\n              tabIndex={-1}\n            />\n          </span>\n        ) && (\n          <span\n            className={`${className} `}\n            ref={inputRefHidden}\n            style={{\n              ...style,\n              display: 'flex',\n              pointerEvents: 'none',\n              backgroundColor: 'transparent',\n              borderColor: 'transparent',\n              boxSizing: 'border-box',\n              color: 'rgba(0, 0, 0, 0.35)',\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              justifyContent: 'flex-end',\n              alignItems: 'stretch',\n              border: 'none',\n              width: '100%',\n              outlineStyle: 'none',\n              margin: 'none',\n              padding: 0,\n            }}\n          >\n            <input\n              value={hint}\n              className={`${className} hint`}\n              id=\"#hint\"\n              style={{\n                ...style,\n                color: 'rgba(0, 0, 0, 0.30)',\n                caretColor: 'transparent',\n                backgroundColor: 'transparent',\n                outline: 'none',\n                width: '100%',\n                border: 'none',\n                outlineStyle: 'none',\n              }}\n              disabled\n              tabIndex={-1}\n            />\n          </span>\n        )}\n      {tabbed && suggestions.length > 0 && (\n        <span id=\"suggestion-ul\" style={{ display: 'table' }}>\n          {suggestions.map((suggestion, i) => (\n            <span key={i} style={{ display: 'block' }}>\n              <button\n                onClick={() => {\n                  setText('')\n                  setText(suggestion)\n                  inputRef.current?.focus()\n                  setSuggestions([])\n                }}\n                tabIndex={i + 2}\n                style={innerStyle}\n              >\n                {suggestion}\n              </button>\n            </span>\n          ))}\n        </span>\n      )}\n    </span>\n  )\n}\n","export const findAndSort = (items: string[], text: string): string[] =>\n  Array.from(new Set(items))\n    .filter((item) =>\n      Object.values(item)\n        .join('')\n        .trim()\n        .toLowerCase()\n        .includes(text.toLowerCase())\n    )\n    .sort((a: string, b: string) => b.localeCompare(a))\n    .sort((a: string, b: string) => {\n      if (a.length > b.length) {\n        return 1\n      } else if (a.length < b.length) {\n        return -1\n      } else return 0\n    })\n","import React from 'react'\nimport { Hintput } from './Hintput'\nconst names = [\n  // 'White-bellied sea eagle',\n  // 'Sanford`s sea eagle',\n  // 'African fish eagle',\n  // 'Pallas fish eagle',\n  // 'Madagascan fish eagle',\n  'Cristiano Ronaldo',\n  'Roberto Ronaldo',\n  'Zinédine Zidane',\n  'Ronaldo Luís Nazário de Lima',\n  'Ronaldo',\n  'Muhammad Salah',\n  'Muhammad Ali',\n  'Jamie Ali',\n  'ali javid',\n  'Salah Abdul',\n  'abdullah',\n  'michael Jeffrey jordan',\n  'Reilly Wynn',\n  'Sarah-Jane Singh',\n  'Luna Soto',\n  'Samual Samuels',\n  'Shanna Holder',\n  'Esme-Rose Steadman',\n  'african fish eagle',\n]\nfunction App() {\n  const [name, setName] = React.useState('')\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value)\n  }\n  return (\n    <div style={{ width: '50%' }}>\n      <pre>\n        {names.map((n, i) => (\n          <p key={i} style={{ color: 'black' }}>\n            {n}\n          </p>\n        ))}\n      </pre>\n      <p>\n        <label htmlFor=\"names\">Name:</label>\n        <Hintput\n          items={names}\n          name=\"names\"\n          handleBlur={handleChange}\n          // handleChange={handleChange}\n          placeholder=\"Type a name\"\n        />\n      </p>\n      <p>\n        The name your selected:\n        <span style={{ color: 'green' }}> {name.toUpperCase()}</span>\n      </p>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}