{"version":3,"sources":["HintDisplay.tsx","Hintput.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["HintDisplay","inputName","placeholder","text","hint","tabbed","suggestions","handleBlur","handleChange","handleKeyDown","setSuggestions","setText","inputRef","React","useRef","innerStyle","background","border","outline","style","position","padding","margin","display","ref","className","type","name","id","value","toLowerCase","onChange","onBlur","onKeyDown","tabIndex","length","color","pointerEvents","backgroundColor","borderColor","boxSizing","top","left","justifyContent","alignItems","caretColor","disabled","map","suggestion","i","onClick","current","focus","Hintput","items","numberOfSuggestions","useState","setHint","setTabbed","useEffect","hintArray","Array","from","Set","filter","item","Object","values","join","trim","includes","sort","a","b","localeCompare","findAndSort","hintIndex","indexOf","restHint","substr","firstMatch","split","slice","hintBegging","e","target","code","shiftKey","names","App","setName","width","n","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b9d97558.chunk.js","sourcesContent":["import React from 'react'\nimport { IHintDisplay } from './types'\n\nexport default function HintDisplay({\n  inputName,\n  placeholder,\n  text,\n  hint,\n  tabbed,\n  suggestions,\n  handleBlur,\n  handleChange,\n  handleKeyDown,\n  setSuggestions,\n  setText,\n}: IHintDisplay) {\n  const inputRef = React.useRef<HTMLInputElement>(null)\n\n  const innerStyle = {\n    background: 'transparent',\n    border: 'none',\n    ':selected, :focused': {\n      border: 'none',\n      outline: '1px solid blue',\n    },\n  }\n  return (\n    <span\n      style={{\n        position: 'relative',\n        padding: 0,\n        margin: 0,\n        display: 'inline-block',\n      }}\n    >\n      <input\n        ref={inputRef}\n        className=\"hint\"\n        type=\"text\"\n        name={inputName}\n        id={inputName}\n        placeholder={placeholder}\n        value={text.toLowerCase()}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        onKeyDown={handleKeyDown}\n        tabIndex={suggestions.length > 0 ? 1 : 0}\n        style={{ color: '#000000' }}\n      />\n\n      <span\n        style={{\n          display: 'flex',\n          pointerEvents: 'none',\n          backgroundColor: 'transparent',\n          borderColor: 'transparent',\n          boxSizing: 'border-box',\n          color: 'rgba(0, 0, 0, 0.35)',\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          justifyContent: 'flex-end',\n          alignItems: 'center',\n        }}\n      >\n        <input\n          value={hint}\n          className=\"hint \"\n          id=\"#hint\"\n          style={{\n            color: 'rgba(0, 0, 0, 0.30)',\n            caretColor: 'transparent',\n            backgroundColor: 'transparent',\n            outline: 'none',\n          }}\n          disabled\n          tabIndex={-1}\n        />\n      </span>\n      {tabbed && suggestions.length > 0 && (\n        <span id=\"suggestion-ul\" style={{ display: 'table' }}>\n          {suggestions.map((suggestion, i) => (\n            <span key={i} style={{ display: 'block' }}>\n              <button\n                onClick={() => {\n                  setText('')\n                  setText(suggestion)\n                  inputRef.current?.focus()\n                  setSuggestions([])\n                }}\n                tabIndex={i + 2}\n                style={innerStyle}\n              >\n                {suggestion}\n              </button>\n            </span>\n          ))}\n        </span>\n      )}\n    </span>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport HintDisplay from './HintDisplay'\nimport { IHintput } from './types'\nimport './index.css'\n/**\n *\n * @param  - items: array of strings\n * @param - handleBlur: takes an event object and fire action onBlur\n * @param - handleChange: takes an event object and fire action onChange\n * @param - name for the name and id of input box and label\n * @returns - Returns a react component\n */\n\n//removes duplicate and find and sort\nconst findAndSort = (items: string[], text: string): string[] =>\n  Array.from(new Set(items))\n    .filter((item) =>\n      Object.values(item)\n        .join('')\n        .trim()\n        .toLowerCase()\n        .includes(text.toLowerCase())\n    )\n    .sort((a: string, b: string) => b.localeCompare(a))\n    .sort((a: string, b: string) => {\n      if (a.length > b.length) {\n        return 1\n      } else if (a.length < b.length) {\n        return -1\n      } else return 0\n    })\nexport function Hintput({\n  items,\n  handleBlur,\n  handleChange,\n  placeholder,\n  numberOfSuggestions = 5,\n  name,\n}: IHintput): React.ReactElement {\n  const [hint, setHint] = useState('')\n  const [text, setText] = useState('')\n  const [suggestions, setSuggestions] = useState<string[]>([])\n  const [tabbed, setTabbed] = useState(false)\n\n  useEffect(() => {\n    if (text === '') {\n      return\n    }\n    if (text.length > 2) {\n      const hintArray = findAndSort(items, text)\n      //hint = 0 => don't show suggestions\n      if (hintArray.length <= 0) {\n        setHint('')\n        setSuggestions([])\n      }\n      //hint = 1 => don't show suggestions\n      if (hintArray.length === 1) {\n        const hintIndex = hintArray[0]\n          ?.toLowerCase()\n          .indexOf(text.toLowerCase())\n        if (hintIndex === 0) {\n          setHint(hintArray[0].toLowerCase())\n        } else if (hintIndex > 0) {\n          const restHint = hintArray[0]?.substr(0, hintIndex)\n          if (restHint) {\n            setText(restHint + text)\n          }\n        }\n        setSuggestions([])\n      }\n      /**\n       * hint > 1,\n       * if(hint matched at beginning) just show the hint and remove it from suggestions\n       * if(hint matched at last) don't show hint, and don't remove it from suggestions\n       * if(hint matched in the middle) do show the hint, and remove it from suggestions\n       */\n      if (hintArray.length > 1) {\n        const firstMatch = hintArray[0]\n        const hintIndex = firstMatch?.toLowerCase().indexOf(text.toLowerCase())\n        if (hintIndex === 0) {\n          setHint(firstMatch.toLowerCase())\n        } else if (hintIndex > 0) {\n          const isLastWord = firstMatch.split(' ').slice(-1).join('') //get the last word\n          if (isLastWord) {\n            return setSuggestions(hintArray.slice(0, numberOfSuggestions))\n          }\n          const hintBegging = firstMatch.substr(0, hintIndex)\n          const completedWord = hintBegging + text\n          setHint(completedWord)\n        }\n        setSuggestions(hintArray.slice(1, numberOfSuggestions))\n      }\n    }\n  }, [hint, items, numberOfSuggestions, text])\n  const handleBlurInside = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target\n    setText(value)\n\n    handleBlur(e)\n  }\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.code === 'Backspace') {\n      setHint('')\n      setText('')\n      setSuggestions([])\n    }\n    if (e.code === 'Tab') {\n      if (suggestions.length <= 0) {\n        if (hint) setText(hint)\n        setHint('')\n      }\n    }\n    if (e.code === 'Enter') {\n      if (hint) setText(hint)\n      setHint('')\n      setSuggestions([])\n      setTabbed(false)\n    }\n    if (e.shiftKey && e.code === 'Tab') {\n      setHint('')\n      setSuggestions([])\n      setTabbed(false)\n    }\n  }\n\n  const handleChangeInside = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target as HTMLInputElement\n    setText(value.toLowerCase())\n    setTabbed(true)\n    handleChange(e)\n  }\n\n  return (\n    <HintDisplay\n      text={text}\n      setText={setText}\n      hint={hint}\n      handleBlur={handleBlurInside}\n      handleChange={handleChangeInside}\n      handleKeyDown={handleKeyDown}\n      suggestions={suggestions}\n      setSuggestions={setSuggestions}\n      tabbed={tabbed}\n      placeholder={placeholder || ''}\n      inputName={name || ''}\n    />\n  )\n}\n","import React from 'react'\nimport './App.css'\nimport { Hintput } from './Hintput'\nconst names = [\n  'Messi',\n  'Cristiano Ronaldo',\n  'Roberto Ronaldo',\n  'Zinédine Zidane',\n  'Ronaldo',\n  'Muhammad Salah',\n  'Muhammad Ali',\n  'Jamie Ali',\n  'ali javid',\n  'Salah Abdul',\n  'abdullah',\n  'michael Jeffrey jordan',\n  'Reilly Wynn',\n  'Sarah-Jane Singh',\n  'Luna Soto',\n  'Samual Samuels',\n  'Shanna Holder',\n  'Esme-Rose Steadman',\n]\nfunction App() {\n  const [name, setName] = React.useState('')\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value)\n  }\n  return (\n    <div>\n      <pre style={{ backgroundColor: '#eee', padding: '1.3em', width: '30%' }}>\n        {names.map((n, i) => (\n          <p key={i} style={{ color: 'black' }}>\n            {n}\n          </p>\n        ))}\n      </pre>\n      <p>\n        <Hintput\n          items={names}\n          name=\"names\"\n          handleBlur={handleChange}\n          handleChange={handleChange}\n          placeholder=\"Type a name\"\n        />\n      </p>\n      <p style={{ color: 'green' }}>{name}</p>\n      <p>\n        <input type=\"text\" className=\"hint\" placeholder=\"regular input\" />\n      </p>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}